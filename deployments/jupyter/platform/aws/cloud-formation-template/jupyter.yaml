AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  License: TODO
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Jupyter"
        Parameters:
          - JupyterName
          - InstanceType
          - VolumeSize
          - TerminationProtection
          - JupyterToken
          - IamRole
      - Label:
          default: "Jupyter connection"
        Parameters:
          - LoadBalancing
          - Private
          - Session
          - Vpc
          - Subnet
          - KeyName
          - AccessCIDR

Description: >-
  AWS CloudFormation Template jupyter: a jupyter instance configured with the regulus kernel.
  You will be billed for the AWS resources used if you create a stack from this template.

Parameters:

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  JupyterName:
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: jupyter
    Description: The jupyter service instance name
    MaxLength: '20'
    MinLength: '1'
    Type: String

  Private:
    Description: Will Jupyter be deployed in a private netowrk without public IPs?
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

  LoadBalancing:
    Description: |
      Will Jupyter be accessded via a ALB or NLB? 
      This Load balancer in intended to provide TLS termination and access to private networks,
      not to add multiple Jupyter instance for workload distribution.
    Type: String
    Default: NetworkLoadBalancer
    AllowedValues:
      - None
      - NetworkLoadBalancer
      # - ApplicationLoadBalancer

  Session:
    Description: Should Jupyter be accessible via AWS Session Manager?
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

  Vpc:
    ConstraintDescription: must be the name of an existing vpc.
    Description: Network to deploy the jupyter service to.
    Type: AWS::EC2::VPC::Id

  Subnets:
    ConstraintDescription: must be the name of existing subnets.
    Description: |
      Subnetwork(s) to deploy the Jupyter service to.
      If using an ApplicationLoadBalancer for Access, Please select at least two subnets.
    Type: List<AWS::EC2::Subnet::Id>

  HttpPort:
    ConstraintDescription: must be a valid ununsed port between 0 and 65535.
    Description: port to access the jupyter service ui.
    Type: Number
    Default: 8888
    MinValue: 0
    MaxValue: 65535

  Version:
    Type: String
    Default: latest
    Description: Which version of jupyter to deploy, uses container version tags, defaults to "latest"

  JupyterToken:
    Type: String
    NoEcho: true
    Description: The token or password equivalent used to access Jupyter.

  VolumeSize:
    ConstraintDescription: Size in GB, between 10 and 1000.
    Description: port to access the jupyter service api.
    Type: Number
    Default: 20
    MinValue: 8
    MaxValue: 1000

  TerminationProtection:
    Description: Enable instance termination protection.
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

  InstanceType:
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: jupyter EC2 instance type
    Type: String

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances, leave empty if no ssh keys should be included
    Type: String

  IamRole:
    Description: Name of an existing IAM Role to assign to Jupyter, leave empty to automatically create a compatible role.
    Type: String

  AccessCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to communicate with the Jupyter instance.
    MaxLength: '18'
    MinLength: '9'
    Type: String

Rules:
  subnetsInVpc:
    Assertions:
      - Assert:
          Fn::EachMemberEquals:
            - Fn::ValueOfAll:
              - AWS::EC2::Subnet::Id
              - VpcId
            - Ref: Vpc
        AssertDescription: The subnet you selected is not in the VPC

Conditions:

  HASALB:
    !Equals [!Ref LoadBalancing, 'ApplicationLoadBalancer' ]

  HASNLB:
    !Equals [!Ref LoadBalancing, 'NetworkLoadBalancer' ]

  HASLB: !Or
    - !Condition HASALB
    - !Condition HASNLB

  NEEDSROLE:
    !Equals [!Ref IamRole, '' ]

  HASPUBLICIP:
    !Not [ !Equals [ !Ref Private, 'true' ] ]

  HASKEY:
    !Not [ !Equals [ !Ref KeyName, '' ] ]

  HASCIDRANDLB: !And
    - !Condition HASLB
    - !Condition HASCIDR

  HASCIDR:
    !Not [ !Equals [!Ref AccessCIDR, '' ] ]

  USESESSIONMANAGER:
    !Equals [ !Ref Session, 'true' ]

  NEEDSROLEANDSESSIONMANAGER: !And
    - !Condition NEEDSROLE
    - !Condition USESESSIONMANAGER

  NEEDINSTANCEPROFILE: !Or
    - !Not [ !Condition NEEDSROLE ]
    - !Condition NEEDSROLEANDSESSIONMANAGER

  HASKEYANDCIDR: !And
    - !Condition HASKEY
    - !Condition HASCIDR

  HASKEYANDPUBLIC: !And
    - !Condition HASKEY
    - !Condition HASPUBLICIP

Resources:

  JupyterServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          jupyter_install:
          - install_docker
          - configure_jupyter_service
          - start_jupyter_service
        install_docker:
          commands:
            install_docker:
              command: !Sub |
                #!/bin/bash -xe
                amazon-linux-extras install docker -y
                amazon-linux-extras enable docker
          services:
            systemd:
              docker:
                enabled: "true"
                ensureRunning: "true"
        configure_jupyter_service:
          files:
            /usr/lib/systemd/system/jupyter.service:
              content: !Sub |
                [Unit]
                Description=jupyter
                After=docker.service
                Requires=docker.service
                StartLimitInterval=200
                StartLimitBurst=10

                [Service]
                TimeoutStartSec=0
                Restart=always
                RestartSec=2
                ExecStartPre=-/usr/bin/mkdir -p /etc/td
                ExecStartPre=-/usr/bin/docker exec %n stop || true
                ExecStartPre=-/usr/bin/docker rm %n || true
                ExecStartPre=/usr/bin/docker pull teradata/regulus-jupyter:${ Version }
                ExecStart=/usr/bin/docker run \
                    -e accept_license=Y \
                    -e JUPYTER_TOKEN=${ JupyterToken } \
                    -v /etc/td:/home/jovyan/JupyterLabRoot/userdata \
                    -p ${ HttpPort }:8888 \
                    --rm --name %n teradata/regulus-jupyter:${ Version }

                [Install]
                WantedBy=multi-user.target
              group: root
              mode: '000400'
              owner: root
        start_jupyter_service:
          services:
            systemd:
              jupyter:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      PropagateTagsToVolumeOnCreation: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            Encrypted: true
      SubnetId: !Select [ 0, !Ref Subnets ]
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName:
        Fn::If:
        - HASKEY
        - Ref: KeyName
        - Ref: AWS::NoValue
      DisableApiTermination: !Ref TerminationProtection
      SecurityGroupIds: [!GetAtt JupyterSecurityGroup.GroupId] 
      IamInstanceProfile: 
        Fn::If:
        - NEEDINSTANCEPROFILE
        - Ref: JupyterInstanceProfile
        - Ref: AWS::NoValue
      
      Tags: 
        - Key: Name
          Value: !Ref JupyterName
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           yum update -y
           yum update -y aws-cfn-bootstrap
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource JupyterServer --configsets jupyter_install --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource JupyterServer --region ${AWS::Region}

  LoadBalancerSecurityGroup:
    Condition: HASCIDRANDLB
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Enable access to Jupyter server from LoadBalancer over http, grpc, and ssh"
      SecurityGroupIngress:
      - CidrIp: !Ref AccessCIDR
        FromPort: !Ref HttpPort
        IpProtocol: tcp
        ToPort: !Ref HttpPort

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref Subnets 
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Type: 
        Fn::If:
          - HASALB
          - application
          - network

  HTTPListener:
    Condition: HASLB
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            Fn::If:
              - HASALB
              - !Ref JupyterALBHTTPTargetGroup
              - !Ref JupyterNLBHTTPTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref HttpPort
      Protocol: 
        Fn::If:
          - HASALB
          - HTTP
          - TCP

  JupyterALBHTTPTargetGroup:
    Condition: HASALB
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      Matcher:
        HttpCode: '200'
      Name: !Sub "${JupyterName}-HttpTargetGroup"
      Port: !Ref HttpPort
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: app_cookie 
      - Key: stickiness.app_cookie.cookie_name
        Value: TDJupyterHTTPSSESSION
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref JupyterServer
        Port: !Ref HttpPort
      VpcId: !Ref Vpc

  JupyterNLBHTTPTargetGroup:
    Condition: HASNLB
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      Name: !Sub "${JupyterName}-HttpTargetGroup"
      Port: !Ref HttpPort
      Protocol: TCP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: source_ip
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref JupyterServer
        Port: !Ref HttpPort
      VpcId: !Ref Vpc

  JupyterSecurityGroup:
    Condition: HASCIDR
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Enable access to jupyter server over http"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref HttpPort
          ToPort: !Ref HttpPort
          SourceSecurityGroupId: 
            Fn::If:
              - HASLB
              - Fn::GetAtt:
                  - LoadBalancerSecurityGroup
                  - GroupId
              - !Ref AWS::NoValue
          CidrIp: 
            Fn::If:
              - HASLB
              - !Ref AWS::NoValue
              - !Ref AccessCIDR

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HASKEYANDCIDR
    Properties: 
      GroupId: !GetAtt JupyterSecurityGroup.GroupId
      CidrIp: !Ref AccessCIDR
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22

  JupyterRole:
    Condition: NEEDSROLEANDSESSIONMANAGER
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  SessionManagerPolicies:
    Condition: NEEDSROLEANDSESSIONMANAGER
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: JupyterSessionManagerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: 
          - "ssm:DescribeAssociation"
          - "ssm:GetDeployablePatchSnapshotForInstance"
          - "ssm:GetDocument"
          - "ssm:DescribeDocument"
          - "ssm:GetManifest"
          - "ssm:ListAssociations"
          - "ssm:ListInstanceAssociations"
          - "ssm:PutInventory"
          - "ssm:PutComplianceItems"
          - "ssm:PutConfigurePackageResult"
          - "ssm:UpdateAssociationStatus"
          - "ssm:UpdateInstanceAssociationStatus"
          - "ssm:UpdateInstanceInformation"
          Resource: "*"
        - Effect: Allow
          Action: 
          - "ssmmessages:CreateControlChannel"
          - "ssmmessages:CreateDataChannel"
          - "ssmmessages:OpenControlChannel"
          - "ssmmessages:OpenDataChannel"
          Resource: "*"
        - Effect: Allow
          Action: 
          - "ec2messages:AcknowledgeMessage"
          - "ec2messages:DeleteMessage"
          - "ec2messages:FailMessage"
          - "ec2messages:GetEndpoint"
          - "ec2messages:GetMessages"
          - "ec2messages:SendReply"
          Resource: "*"
      Roles:
      - !Ref JupyterRole

  JupyterInstanceProfile:
    Condition: NEEDINSTANCEPROFILE
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        Fn::If:
        - NEEDSROLEANDSESSIONMANAGER
        - [ Ref: JupyterRole ]
        - [ Ref: IamRole ]




Outputs:
  PublicIP:
    Condition: HASPUBLICIP 
    Description: EC2 public IP
    Value: !GetAtt JupyterServer.PublicIp

  PrivateIP:
    Description: EC2 private IP
    Value: !GetAtt JupyterServer.PrivateIp

  LoadBalancerUIAccess:
    Condition: HASLB
    Description: Loadbalancer access endpoint for UI Access
    Value: !Sub "${ LoadBalancer.DNSName }:${ HttpPort }"

  PublicHttpAccess:
    Condition: HASPUBLICIP 
    Description: Teradata jupyter Server
    Value: !Sub "http://${JupyterServer.PublicDnsName}:${ HttpPort }?token=${ JupyterToken }"

  PrivateHttpAccess:
    Description: Teradata jupyter Server
    Value: !Sub "http://${JupyterServer.PrivateDnsName}:${ HttpPort }?token=${ JupyterToken }"

  SecurityGroup:
    Description: jupyter Security Group
    Value: !GetAtt JupyterSecurityGroup.GroupId

  PublicSSHConeection:
    Condition: HASKEYANDPUBLIC
    Description: jupyter ssh connnection string
    Value: !Sub "ssh ec2-user@${ JupyterServer.PublicIp }"

  PrivateSSHConeection:
    Condition: HASKEY
    Description: jupyter ssh connnection string
    Value: !Sub "ssh ec2-user@${ JupyterServer.PrivateIp }"
